// ====================================================================================================== //
// MIXINS //
// ====================================================================================================== //
@mixin circle($size) {
  width: $size;
  height: $size;
  @include border-radius($size / 2);
}

@mixin square($size) {
  width: $size;
  height: $size;
}

@mixin rect($width, $height) {
  width: $width;
  height: $height;
}

@mixin cleanbox() {
  margin: 0;
  padding: 0;
}

@mixin arrowright($color: #FFF, $size: 15px, $sharpness: 25px) {
  border: solid transparent;
  height: 0;
  width: 0;
  pointer-events: none;
  border-left-color: $color;
  border-width: $size;
  border-left-width: $sharpness;
}

@mixin arrowleft($color: #FFF, $size: 15px, $sharpness: 25px) {
  border: solid transparent;
  height: 0;
  width: 0;
  pointer-events: none;
  border-right-color: $color;
  border-width: $size;
  border-right-width: $sharpness;
}

@mixin arrowtop($color: #FFF, $size: 15px, $sharpness: 25px) {
  border: solid transparent;
  height: 0;
  width: 0;
  pointer-events: none;
  border-bottom-color: $color;
  border-width: $size;
  border-bottom-width: $sharpness;
}

@mixin arrowbottom($color: #FFF, $size: 15px, $sharpness: 25px) {
  border: solid transparent;
  height: 0;
  width: 0;
  pointer-events: none;
  border-top-color: $color;
  border-width: $size;
  border-top-width: $sharpness;
}

@mixin customcheck($width, $height, $path, $hover_row, $hover_col) {
  position: relative;
  width: $width;
  height: $height;

  input {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 100;
    cursor: pointer;
    opacity: 0;
  }

  label {
    position: relative;
    display: block;
    background: image-url($path) top left no-repeat;
    width: 100%;
    height: 100%;
  }

  input:checked ~ label {
    @include sprite-position($hover_row, $hover_col, $width, $height);
  }
}

@mixin typo($font, $size, $lh, $color, $weight: normal, $style: normal, $unit: rem) {
  @include font-size-line-height($size, $lh, $unit);
  font-family: $font;
  color: $color;
  font-weight: $weight;
  font-style: $style;
}

@function font-family-stack($name: "Arial", $kind: "regular", $stack: $base_font_stack) {
  @return "#{$name}-#{$kind}", $stack;
}

@mixin font-size($sizeValue, $unit: rem) {
  @if $rem-with-px-fallback == true {
    font-size: $sizeValue + px;
  }

  font-size: $sizeValue / $rembase + $unit;
}

@mixin line-height($line-height, $unit: rem) {
  @if $rem-with-px-fallback == true {
    line-height: $line-height + px;
  }

  line-height: $line-height / $rembase + $unit;
}

@mixin font-size-line-height($font-size, $line-height, $unit: rem) {
  @include font-size($font-size, $unit);
  @include line-height($line-height, $unit);
}

@mixin fontsmoothing ($smooting: antialiased) {
  -webkit-font-smoothing: $smooting;
  -moz-font-smoothing: $smooting;
  -ms-font-smoothing: $smooting;
  font-smoothing: $smooting;
}

@mixin unselectable {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -o-user-select: none;
  user-select: none;
}

@mixin overlay($color) {
  @include square(100%);
  position: fixed;
  top: 0;
  left: 0;
  z-index: 10000;
  background-color: rgba($color, .8);

  &.out {
    background-color: rgba($color, 0);
  }
}

@mixin no-flick {
  @include translate3d(0, 0, 0);
}

@mixin sprite-background($image) {
  background-repeat: no-repeat;
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $image);
  @include rect(image-width(sprite-file($sprites, $image)), image-height(sprite-file($sprites, $image)));
}

@mixin centerrect($width, $height, $state: absolute) {
  position: $state;
  @include rect($width, $height);
  top: 50%;
  left: 50%;
  margin: -$height / 2 0 0 - $width / 2;
}

@mixin center {
  display: table;
  width: 100%;

  .child {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
  }
}

@mixin corner($state: absolute, $place: "tl") {
  position: $state;
  @if $place == "tl" {
    top: 0;
    left: 0;
  } @else if $place == "tr" {
    top: 0;
    right: 0;
  } @else if $place == "bl" {
    bottom: 0;
    left: 0;
  } @else if $place == "br" {
    bottom: 0;
    right: 0;
  } @else if $place == "t" {
    top: 0;
    left: 50%;
  } @else if $place == "r" {
    top: 50%;
    right: 0;
  } @else if $place == "b" {
    bottom: 0;
    left: 50%;
  } @else if $place == "l" {
    top: 50%;
    left: 0;
  } @else if $place == "c" {
    top: 50%;
    left: 50%;
  }
}

@mixin rounded-table($r) {
  thead tr:first-child :first-child {
    -moz-border-radius-topleft: $r;
    -webkit-border-top-left-radius: $r;
    border-top-left-radius: $r;
  }

  thead tr:first-child :last-child {
    -moz-border-radius-topright: $r;
    -webkit-border-top-right-radius: $r;
    border-top-right-radius: $r;
  }
}

@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

@mixin centered($width: 1200px) {
  max-width: $width;
  margin: 0 auto;
}

@mixin padborder($padd: 25px 0, $bord: 1px solid $border_colors, $last_child: true) {
  padding: $padd;
  border-bottom: $bord;

  @if $last_child == true {
    &:last-child {
      border-bottom: 0 !important;
    }
  }
}

@mixin center($margin: $mobile_margin) {
  @include centered($site_width);
  margin: 0 $margin;

  .centered {
    margin: 0;
  }

  @include breakpoint(map-get($breakpoints, "desktop")) {
    margin: 0 auto;
  }
}

%mb20 {
  margin-bottom: 20px;
}

%m5 {
  margin: 5px 0;

  &:first-child {
    margin: 0 0 5px;
  }
}

@mixin pill() {
  @if mg($pill, is_inlineblock) == true{
    @include inline-block;
  }

  @include border-radius(mg($pill, border_radius));
  background-color: mg($pill, bgc);
  color: mg($pill, color);
  padding: mg($pill, padding);
}

@mixin navigator() {
  background-color: map-get($colors, "first");
  padding: 0;
  margin: 0 0 20px;
  @include clearfix;

  li {
    list-style-type: none;
    float: left;

    &.active-tab {
      background-color: map-get($colors, "second");
    }

    a {
      @include inline-block;
      @include typo($body_font_family, $font_size_base, $font_size_base, $white);
      padding: 15px;
      border-left: 1px solid $white;

      &:hover {
        text-decoration: none;
      }
    }


    &:first-child {
      a {
        border-left: 0;
      }
    }
  }
}

@mixin sidebar-item() {
  @include typo(font-family-stack($base_font_family, "regular", $base_font_stack), $font_size_base, $font_size_base, $white);
  list-style-type: none;
  border-bottom: 1px solid $white;

  a {
    @include inline-block;
    padding: 15px 5px 15px 15px;
    @include typo($body_font_family, $font_size_base, $font_size_base, $white);


    &:hover {
      text-decoration: none;
    }
  }
}

@mixin grid($i, $container: false) {
  @if $container {
    @include container;
  }

  > * {
    @include span(map-get($susy, "columns") / $i of map-get($susy, "columns"));

    &:nth-child(#{$i}n) {
      @include last;
    }

    &:nth-child(#{$i}n+1) {
      clear: both;
    }
  }
}

@mixin fa-icon ($code) {
  @include fontsmoothing();
  color: inherit;
  content: $code;
  line-height: inherit;
  speak: none;
  display: inline-block;
  font: normal normal normal 14px/1 FontAwesome;
  font-size: inherit;
  text-rendering: auto;
  transform: translate(0, 0);
}

@mixin flex() {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-vertical-center() {
  @include flex();
  -ms-flex-align: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  align-items: center;
}

@function mg($map, $key) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  } @else {
    @warn "

      `#{$key}` was not found in`#{map-get($map, name)}` for theme #{$themename}
      !!! This error should be fixed, because this outputs 'initial' in the css property !!!
      ";
    @return "initial";
  }
}

@function debuglist($list) {
  // We open the bracket
  $result: "[ ";

    // For each item in list
  @each $item in $list {
    // We test its length
    // If it's more than one item long
    @if length($item) > 1 {
      // We deal with a nested list
      $result: $result + debuglist($item);
    } @else { // Else we append the item to $result
      $result: $result + $item;
    }

    // If we are not dealing with the last item of the list
    // We add a comma and a space
    @if index($list, $item) != length($list) {
      $result: $result + ", ";
    }
  }

  // We close the bracket
  // And return the string
  $result: $result + " ]
";
  @return quote($result);
}
